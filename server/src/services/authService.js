import User from "../models/User.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

const JWT_SECRET = "your-secret-key";

const createUser = async ({ firstName, lastName, email, password }) => {
    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        console.log("üîµ –ü–æ–ª—É—á–µ–Ω–∏ –¥–∞–Ω–Ω–∏:", { firstName, lastName, email, password });

        const newUser = new User({ firstName, lastName, email, password: hashedPassword });

        console.log("üü¢ –ü—Ä–µ–¥–∏ –∑–∞–ø–∏—Å –≤ MongoDB:", newUser);

        const savedUser = await newUser.save();

        console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω:", savedUser);
        return savedUser;

    } catch (error) {
        console.error("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å:", error.message);
        console.error("üìù Stack trace:", error.stack);
        throw error;
    }
};

const authenticateUser = async ({ email, password }) => {
    const user = await User.findOne({ email });
    if (!user) throw new Error("Invalid credentials");

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) throw new Error("Invalid credentials");

    const token = jwt.sign(
        { id: user._id, role: user.role },
        JWT_SECRET,
        { expiresIn: "1h" }
    );
    
    // –í—Ä—ä—â–∞–º–µ —Ç–æ–∫–µ–Ω + —Å–∏–≥—É—Ä–Ω–∏ user –¥–∞–Ω–Ω–∏
    return {
        token,
        user: {
            id: user._id,
            firstName: user.firstName,
            lastName: user.lastName,
            userName: user.userName,
            role: user.role,
        },
    };
};

export default { createUser, authenticateUser };